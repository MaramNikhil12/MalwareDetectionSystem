import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class MalwareDetectionSystem extends JFrame {
    private JLabel dateTimeLabel;
    private JButton scanButton;
    private JButton quarantineButton;
    private JButton deleteButton;
    private JButton developerButton;
    private JButton scanHistoryButton;
    private JButton donateButton;
    private JLabel resultLabel;
    private File infectedFile;
    private List<String> scanHistory;
    private static final String DONATION_LINK = "https://www.buymeacoffee.com/r3dhulk";

    public MalwareDetectionSystem() {
        setTitle("Malware Detection System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 250);
        setLayout(new FlowLayout());

        dateTimeLabel = new JLabel();
        add(dateTimeLabel);

        scanButton = new JButton("Scan File");
        scanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                scanFile();
            }
        });
        add(scanButton);

        quarantineButton = new JButton("Quarantine File");
        quarantineButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                quarantineFile();
            }
        });
        quarantineButton.setEnabled(false);
        add(quarantineButton);

        deleteButton = new JButton("Delete File");
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteFile();
            }
        });
        deleteButton.setEnabled(false);
        add(deleteButton);

        scanHistoryButton = new JButton("Scan History");
        scanHistoryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showScanHistory();
            }
        });
        add(scanHistoryButton);

        developerButton = new JButton("Developer");
        developerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showDeveloperName();
            }
        });
        add(developerButton);

        donateButton = new JButton("Donate");
        donateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openDonationLink();
            }
        });
        add(donateButton);

        resultLabel = new JLabel();
        add(resultLabel);

        setVisible(true);

        // Update the date and time label every second
        updateDateTimeLabel();
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateDateTimeLabel();
            }
        });
        timer.start();

        scanHistory = new ArrayList<>();
    }

    private void updateDateTimeLabel() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dateTime = dateFormat.format(new Date());
        dateTimeLabel.setText(dateTime);
    }

    private void scanFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            boolean isInfected = isInfected(file);

            if (isInfected) {
                resultLabel.setText("File is infected with malware!");
                quarantineButton.setEnabled(true);
                deleteButton.setEnabled(true);
                infectedFile = file;
            } else {
                resultLabel.setText("File is clean.");
                quarantineButton.setEnabled(false);
                deleteButton.setEnabled(false);
                infectedFile = null;
            }

            // Add the scan result to the history
            String scanResult = file.getName() + ": " + (isInfected ? "Infected" : "Clean");
            scanHistory.add(scanResult);
        }
    }

    private void quarantineFile() {
        if (infectedFile != null) {
            String originalFilePath = infectedFile.getAbsolutePath();
            String quarantineFilePath = originalFilePath + ".quarantine";
            File quarantineFile = new File(quarantineFilePath);

            boolean renamed = infectedFile.renameTo(quarantineFile);
            if (renamed) {
                resultLabel.setText("File quarantined successfully.");
                quarantineButton.setEnabled(false);
                deleteButton.setEnabled(false);
            } else {
                resultLabel.setText("Failed to quarantine the file.");
            }
        }
    }

    private void deleteFile() {
        if (infectedFile != null) {
            boolean deleted = infectedFile.delete();
            if (deleted) {
                resultLabel.setText("File deleted successfully.");
                quarantineButton.setEnabled(false);
                deleteButton.setEnabled(false);
                infectedFile = null;
            } else {
                resultLabel.setText("Failed to delete the file.");
            }
        }
    }

    private boolean isInfected(File file) {
        // Perform advanced heuristics checks
        String fileName = file.getName();
        String fileExtension = getFileExtension(fileName);

        // Check for known malware file extensions
        if (fileExtension.equals("exe") || fileExtension.equals("dll")) {
            return true;
        }

        // Check for suspicious file names
        if (fileName.contains("malware") || fileName.contains("virus")) {
            return true;
        }

        // Add more advanced heuristics checks here...

        return false;
    }

    private String getFileExtension(String fileName) {
        int dotIndex = fileName.lastIndexOf(".");
        if (dotIndex > 0 && dotIndex < fileName.length() - 1) {
            return fileName.substring(dotIndex + 1).toLowerCase();
        }
        return "";
    }

    private void showDeveloperName() {
        JOptionPane.showMessageDialog(this, "Developed By Sumalya Chatterjee", "Developer", JOptionPane.INFORMATION_MESSAGE);
    }

    private void showScanHistory() {
        StringBuilder historyMessage = new StringBuilder();
        for (String scanResult : scanHistory) {
            historyMessage.append(scanResult).append("\n");
        }
        JOptionPane.showMessageDialog(this, historyMessage.toString(), "Scan History", JOptionPane.INFORMATION_MESSAGE);
    }

    private void openDonationLink() {
        try {
            Desktop.getDesktop().browse(new URI(DONATION_LINK));
        } catch (IOException | URISyntaxException ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new MalwareDetectionSystem();
            }
        });
    }
}
